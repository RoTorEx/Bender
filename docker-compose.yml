version: "3.8"
services:
  redis:
    image: redis:6-alpine
    env_file:
      - .env
    environment:
      REDIS_HOST: ${REDIS__HOST}
      VOLUMES_DIR: ~/{VOLUMES_DIR}
    ports:
      - 16379:6379
    volumes:
      - ~/${VOLUMES_DIR}/redis-config:/usr/local/etc/redis/redis.conf
      - ~/${VOLUMES_DIR}/redis-data:/data
    command: "redis-server /usr/local/etc/redis/redis.conf"
    restart: "unless-stopped"

  postgres:
    image: postgres:14-alpine
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES__PASSWORD}
      - POSTGRES_USER=${POSTGRES__USER}
      - POSTGRES_DB=${POSTGRES__NAME}
    ports:
      - 15432:5432
    volumes:
      - ~/${VOLUMES_DIR}/:/docker-entrypoint-initdb.d/
      - ~/${VOLUMES_DIR}/postgres/:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD", "pg_isready", "-q", "-d", "${POSTGRES__NAME}", "-U", "${POSTGRES__USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - redis
    restart: "unless-stopped"

  postgres_backup:
    image: prodrigestivill/postgres-backup-local:14-alpine
    restart: always
    volumes:
      - ~/${VOLUMES_DIR}/backups:/backups
    links:
      - postgres
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=${POSTGRES__HOST}
      - POSTGRES_DB=${POSTGRES__NAME}
      - POSTGRES_USER=${POSTGRES__USER}
      - POSTGRES_PASSWORD=${POSTGRES__PASSWORD}
      - POSTGRES_EXTRA_OPTS=-Z6 --schema=public --blobs
      - SCHEDULE=@daily
      - HEALTHCHECK_PORT=1010

  # postgres_migration:
  #   # # You can override this tag using docker-compose.override.yml
  #   # image: "groosha/telegram-bombsweeper-bot:latest"
  #   build:
  #     context: .
  #   # restart: "on-failure"
  #   depends_on:
  #       - postgres
  #   env_file: .env
  #   command: sh -c "python -m alembic upgrade head"

  adminer:
    image: adminer
    ports:
      - 8080:8080
    depends_on:
      postgres:
        condition: service_healthy
    restart: "unless-stopped"

  bot:
    build:
      context: .
    env_file:
      - .env
    ports:
      - 8000:8000
    volumes:
      - .:/bender_bot
    links:
      - postgres
    depends_on:
      postgres:
        condition: service_healthy
    stop_signal: SIGINT
    restart: "unless-stopped"
